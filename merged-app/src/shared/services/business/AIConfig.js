/**
 * AI Configuration - C·∫•u h√¨nh API keys v√† settings cho Gemini AI
 */
export class AIConfig {
  /**
   * C·∫•u h√¨nh Google Gemini AI
   * üîë ƒê·ªÉ l·∫•y API key mi·ªÖn ph√≠:
   * 1. Truy c·∫≠p: https://makersuite.google.com/app/apikey
   * 2. ƒêƒÉng nh·∫≠p t√†i kho·∫£n Google
   * 3. T·∫°o API key m·ªõi
   * 4. Copy v√† paste v√†o ƒë√¢y
   */
  static GEMINI_CONFIG = {
    // üö® QUAN TR·ªåNG: Thay th·∫ø API key n√†y b·∫±ng API key th·∫≠t c·ªßa b·∫°n
    API_KEY: "AIzaSyB1nZhXYudwuWMGUl4989Da78yMUfQ-AOQ", // Thay b·∫±ng API key th·∫≠t

    MODEL: "models/gemini-2.0-flash-lite", // Optimized for high-volume CV analysis

    // Rate limiting ƒë·ªÉ tr√°nh v∆∞·ª£t qu√° gi·ªõi h·∫°n API
    REQUESTS_PER_MINUTE: 30, // gemini-2.0-flash-lite: 30 requests/minute
    MAX_BATCH_SIZE: 15, // TƒÉng l√™n 15 ƒë·ªÉ t·∫≠n d·ª•ng RPM cao h∆°n
    DELAY_BETWEEN_BATCHES: 50, // Gi·∫£m xu·ªëng 50ms - t·ªëi ∆∞u v·ªõi RPM 30

    // Timeout settings
    REQUEST_TIMEOUT: 8000, // Gi·∫£m xu·ªëng 8s ƒë·ªÉ x·ª≠ l√Ω nhanh h∆°n v·ªõi model m·ªõi

    // Retry settings for quota limits
    MAX_RETRIES: 3,
    RETRY_DELAY: 1000, // 1 second
    QUOTA_RETRY_DELAY: 30000, // 30 gi√¢y cho model m·ªõi (thay v√¨ 45s)

    // Quota tracking cho gemini-2.0-flash-lite
    DAILY_QUOTA_LIMIT: 200, // RPD limit for gemini-2.0-flash-lite
    MINUTE_QUOTA_LIMIT: 30, // RPM limit

    // Performance optimization
    PARALLEL_PROCESSING: true,
    CHUNK_SIZE: 5, // Process 5 CVs simultaneously
  };

  /**
   * Ki·ªÉm tra API key c√≥ h·ª£p l·ªá kh√¥ng
   */
  static isValidAPIKey(apiKey) {
    return (
      apiKey &&
      apiKey !== "AIzaSyCXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" &&
      apiKey.startsWith("AIzaSy") &&
      apiKey.length > 30
    );
  }

  /**
   * L·∫•y c·∫•u h√¨nh hi·ªán t·∫°i
   */
  static getCurrentConfig() {
    return {
      hasValidKey: this.isValidAPIKey(this.GEMINI_CONFIG.API_KEY),
      model: this.GEMINI_CONFIG.MODEL,
      rateLimit: this.GEMINI_CONFIG.REQUESTS_PER_MINUTE,
      batchSize: this.GEMINI_CONFIG.MAX_BATCH_SIZE,
    };
  }

  /**
   * C·∫≠p nh·∫≠t API key
   * @param {string} newAPIKey - API key m·ªõi
   */
  static updateAPIKey(newAPIKey) {
    if (this.isValidAPIKey(newAPIKey)) {
      this.GEMINI_CONFIG.API_KEY = newAPIKey;
      console.log("‚úÖ API key ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng");
      return true;
    } else {
      console.error("‚ùå API key kh√¥ng h·ª£p l·ªá");
      return false;
    }
  }

  /**
   * H∆∞·ªõng d·∫´n l·∫•y API key
   */
  static getAPIKeyGuide() {
    return {
      title: "üîë H∆∞·ªõng d·∫´n l·∫•y Google Gemini API Key (MI·ªÑN PH√ç)",
      steps: [
        "1. Truy c·∫≠p: https://makersuite.google.com/app/apikey",
        "2. ƒêƒÉng nh·∫≠p t√†i kho·∫£n Google c·ªßa b·∫°n",
        '3. Click "Create API key" ho·∫∑c "T·∫°o API key"',
        "4. Ch·ªçn project ho·∫∑c t·∫°o project m·ªõi",
        "5. Copy API key v√† paste v√†o file AIConfig.js",
        "6. Kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng ƒë·ªÉ √°p d·ª•ng",
      ],
      notes: [
        "‚úÖ Gemini API ho√†n to√†n mi·ªÖn ph√≠ v·ªõi gi·ªõi h·∫°n 60 requests/minute",
        "‚úÖ Kh√¥ng c·∫ßn th·∫ª t√≠n d·ª•ng ƒë·ªÉ ƒëƒÉng k√Ω",
        "‚úÖ API key kh√¥ng h·∫øt h·∫°n (tr·ª´ khi b·∫°n x√≥a)",
        "‚ö†Ô∏è B·∫£o m·∫≠t API key, kh√¥ng chia s·∫ª v·ªõi ng∆∞·ªùi kh√°c",
      ],
      troubleshooting: [
        "N·∫øu kh√¥ng truy c·∫≠p ƒë∆∞·ª£c ‚Üí Th·ª≠ VPN ho·∫∑c ƒë·ªïi m·∫°ng",
        "N·∫øu API b·ªã t·ª´ ch·ªëi ‚Üí Ki·ªÉm tra API key c√≥ ƒë√∫ng kh√¥ng",
        "N·∫øu qu√° gi·ªõi h·∫°n ‚Üí ƒê·ª£i 1 ph√∫t r·ªìi th·ª≠ l·∫°i",
        "N·∫øu v·∫´n l·ªói ‚Üí D√πng Local AI (rule-based) t·∫°m th·ªùi",
      ],
    };
  }

  /**
   * Test API key
   */
  static async testAPIKey(apiKey = null) {
    const testKey = apiKey || this.GEMINI_CONFIG.API_KEY;

    if (!this.isValidAPIKey(testKey)) {
      return {
        success: false,
        error: "API key kh√¥ng h·ª£p l·ªá ho·∫∑c ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh",
      };
    }

    try {
      // Simple test v·ªõi Gemini API
      const { GoogleGenerativeAI } = await import("@google/generative-ai");
      const genAI = new GoogleGenerativeAI(testKey);
      const model = genAI.getGenerativeModel({
        model: "models/gemini-2.5-flash",
      });

      const result = await model.generateContent("Hello, test connection");
      const response = await result.response;

      return {
        success: true,
        message: "API key ho·∫°t ƒë·ªông t·ªët!",
        response: response.text().substring(0, 100) + "...",
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        suggestion: this.getSuggestionForError(error.message),
      };
    }
  }

  /**
   * G·ª£i √Ω gi·∫£i quy·∫øt l·ªói
   */
  static getSuggestionForError(errorMessage) {
    if (errorMessage.includes("API key")) {
      return "Ki·ªÉm tra l·∫°i API key c√≥ ƒë√∫ng kh√¥ng";
    }
    if (errorMessage.includes("quota")) {
      return "ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n API, ƒë·ª£i 1 ph√∫t r·ªìi th·ª≠ l·∫°i";
    }
    if (errorMessage.includes("network")) {
      return "Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c th·ª≠ VPN";
    }
    if (
      errorMessage.includes("models/") &&
      errorMessage.includes("not found")
    ) {
      return "Model kh√¥ng t·ªìn t·∫°i. ƒê√£ c·∫≠p nh·∫≠t model m·ªõi: models/gemini-2.5-flash";
    }
    return "Th·ª≠ kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng ho·∫∑c d√πng Local AI t·∫°m th·ªùi";
  }

  /**
   * List available models (for debugging)
   */
  static async listAvailableModels(apiKey = null) {
    const testKey = apiKey || this.GEMINI_CONFIG.API_KEY;

    if (!this.isValidAPIKey(testKey)) {
      console.error("‚ùå API key kh√¥ng h·ª£p l·ªá");
      return [];
    }

    try {
      // List some popular available models
      console.log("üìã Recommended Gemini models:");
      console.log("- models/gemini-2.5-flash (current, fastest)");
      console.log("- models/gemini-2.5-pro (more powerful)");
      console.log("- models/gemini-flash-latest (auto-updated)");
      console.log("- models/gemini-pro-latest (auto-updated)");

      return [
        "models/gemini-2.5-flash",
        "models/gemini-2.5-pro",
        "models/gemini-flash-latest",
        "models/gemini-pro-latest",
      ];
    } catch (error) {
      console.error("‚ùå Kh√¥ng th·ªÉ list models:", error.message);
      return [];
    }
  }
}

/**
 * Fallback config n·∫øu kh√¥ng c√≥ Real AI
 */
export const FALLBACK_CONFIG = {
  USE_LOCAL_AI: true,
  LOCAL_AI_FEATURES: [
    "Ph√¢n t√≠ch k·ªπ nƒÉng c∆° b·∫£n",
    "ƒê√°nh gi√° kinh nghi·ªám",
    "T√≠nh ƒëi·ªÉm t·ªïng h·ª£p",
    "G·ª£i √Ω ph·ªèng v·∫•n ƒë∆°n gi·∫£n",
  ],
  GEMINI_AI_FEATURES: [
    "Ph√¢n t√≠ch CV chi ti·∫øt b·∫±ng AI",
    "ƒê√°nh gi√° t√≠nh c√°ch v√† soft skills",
    "G·ª£i √Ω ph·ªèng v·∫•n th√¥ng minh",
    "D·ª± ƒëo√°n kh·∫£ nƒÉng ph√π h·ª£p ch√≠nh x√°c",
    "Ph√¢n t√≠ch ng√¥n ng·ªØ t·ª± nhi√™n",
    "So s√°nh v·ªõi job requirements",
  ],
};
