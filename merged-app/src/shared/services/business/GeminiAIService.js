import { GoogleGenerativeAI } from "@google/generative-ai";
import { AIConfig } from "./AIConfig.js";

/**
 * Gemini AI Service - S·ª≠ d·ª•ng Google Gemini AI ƒë·ªÉ ph√¢n t√≠ch ·ª©ng vi√™n
 * Advanced AI-powered candidate analysis with Google's Gemini API
 */
export class GeminiAIService {
  constructor() {
    this.config = AIConfig.GEMINI_CONFIG;

    // Ki·ªÉm tra API key
    if (!AIConfig.isValidAPIKey(this.config.API_KEY)) {
      console.warn(
        "‚ö†Ô∏è Google Gemini API key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Xem h∆∞·ªõng d·∫´n trong AIConfig.js"
      );
      this.isConfigured = false;
      return;
    }

    try {
      this.genAI = new GoogleGenerativeAI(this.config.API_KEY);
      this.model = this.genAI.getGenerativeModel({ model: this.config.MODEL });
      this.isConfigured = true;
      console.log("‚úÖ Google Gemini AI ƒë√£ s·∫µn s√†ng");
    } catch (error) {
      console.error("‚ùå L·ªói kh·ªüi t·∫°o Gemini AI:", error);
      this.isConfigured = false;
    }
  }

  /**
   * Ph√¢n t√≠ch ·ª©ng vi√™n b·∫±ng AI th·∫≠t
   * @param {Array} candidates - Danh s√°ch ·ª©ng vi√™n
   * @param {Object} jobRequirements - Y√™u c·∫ßu c√¥ng vi·ªác
   * @returns {Array} ·ª®ng vi√™n ƒë√£ ƒë∆∞·ª£c AI ph√¢n t√≠ch
   */
  async analyzeAndRankCandidatesWithAI(candidates, jobRequirements = {}) {
    // Ki·ªÉm tra c·∫•u h√¨nh
    if (!this.isConfigured) {
      console.warn("‚ö†Ô∏è Real AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh, fallback v·ªÅ Local AI");
      return this.fallbackToLocalAI(candidates, jobRequirements);
    }

    try {
      console.log("ü§ñ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch ·ª©ng vi√™n v·ªõi Google Gemini AI...");
      console.log(
        `‚ö†Ô∏è L∆ØU √ù: Free tier c√≥ gi·ªõi h·∫°n ${this.config.REQUESTS_PER_MINUTE} requests/minute`
      );
      console.log(
        `üìä V·ªõi ${candidates.length} ·ª©ng vi√™n, ∆∞·ªõc t√≠nh th·ªùi gian: ~${Math.ceil(
          candidates.length * 0.5
        )} gi√¢y`
      );

      // X·ª≠ l√Ω theo batch ƒë·ªÉ tr√°nh quota limits, nh∆∞ng s·ª≠ d·ª•ng parallel trong m·ªói batch
      const batchSize = this.config.MAX_BATCH_SIZE;
      const results = [];

      console.log(
        `üìä S·∫Ω x·ª≠ l√Ω ${candidates.length} ·ª©ng vi√™n trong ${Math.ceil(
          candidates.length / batchSize
        )} batches (${batchSize} ·ª©ng vi√™n/batch)`
      );

      for (let i = 0; i < candidates.length; i += batchSize) {
        const batch = candidates.slice(i, i + batchSize);
        const batchNum = Math.floor(i / batchSize) + 1;
        const totalBatches = Math.ceil(candidates.length / batchSize);

        console.log(
          `üì¶ ƒêang x·ª≠ l√Ω batch ${batchNum}/${totalBatches} (${batch.length} ·ª©ng vi√™n)`
        );

        try {
          const batchResults = await this.processCandidateBatch(
            batch,
            jobRequirements
          );
          results.push(...batchResults);

          // Delay ng·∫Øn gi·ªØa c√°c batch, ch·ªâ khi c·∫ßn thi·∫øt
          if (i + batchSize < candidates.length) {
            console.log(
              `‚è∏Ô∏è ƒê·ª£i ${this.config.DELAY_BETWEEN_BATCHES}ms gi·ªØa c√°c batch...`
            );
            await new Promise((resolve) =>
              setTimeout(resolve, this.config.DELAY_BETWEEN_BATCHES)
            );
          }
        } catch (error) {
          console.error(`‚ùå L·ªói x·ª≠ l√Ω batch ${batchNum}:`, error);

          // N·∫øu g·∫∑p quota limit, ƒë·ª£i √≠t h∆°n v√† retry
          if (error.message.includes("429")) {
            console.warn("‚ö†Ô∏è Quota limit reached, ƒë·ª£i 10 gi√¢y v√† th·ª≠ l·∫°i...");
            await new Promise((resolve) => setTimeout(resolve, 10000));
          }

          // Th√™m fallback data cho batch b·ªã l·ªói
          const fallbackResults = batch.map((candidate) => ({
            ...candidate,
            aiScore: 30,
            aiRecommendations: ["Kh√¥ng th·ªÉ ph√¢n t√≠ch do quota limits"],
            riskFactors: ["L·ªói API quota"],
            aiProvider: "Fallback",
          }));
          results.push(...fallbackResults);
        }
      }

      // S·∫Øp x·∫øp theo AI score
      const sortedResults = results.sort((a, b) => b.aiScore - a.aiScore);

      console.log(
        "‚úÖ Ho√†n th√†nh ph√¢n t√≠ch AI cho",
        candidates.length,
        "·ª©ng vi√™n"
      );
      return sortedResults;
    } catch (error) {
      console.error("‚ùå L·ªói ph√¢n t√≠ch AI:", error);
      // Fallback v·ªÅ AI c≈© n·∫øu API th·∫•t b·∫°i
      return this.fallbackToLocalAI(candidates, jobRequirements);
    }
  }

  /**
   * X·ª≠ l√Ω m·ªôt batch ·ª©ng vi√™n - PARALLEL v·ªõi rate limiting th√¥ng minh
   */
  async processCandidateBatch(candidates, jobRequirements) {
    console.log(
      `üöÄ Ph√¢n t√≠ch song song ${candidates.length} ·ª©ng vi√™n v·ªõi rate limiting th√¥ng minh...`
    );

    // Chia nh·ªè th√†nh c√°c sub-batches ƒë·ªÉ x·ª≠ l√Ω parallel m√† kh√¥ng v∆∞·ª£t qu√° rate limit
    const MAX_CONCURRENT = Math.min(5, this.config.REQUESTS_PER_MINUTE); // 5 requests concurrent max
    const results = [];

    // X·ª≠ l√Ω parallel v·ªõi Promise.all
    const promises = candidates.map(async (candidate, index) => {
      try {
        // Delay staggered ƒë·ªÉ tr√°nh hit API c√πng l√∫c
        const staggerDelay = index * 200; // 200ms delay gi·ªØa m·ªói request
        await new Promise((resolve) => setTimeout(resolve, staggerDelay));

        console.log(
          `üìä Ph√¢n t√≠ch ·ª©ng vi√™n ${index + 1}/${candidates.length}: ${
            candidate.name
          }`
        );

        const analysis = await this.analyzeSingleCandidateWithRetry(
          candidate,
          jobRequirements
        );
        return {
          ...candidate,
          ...analysis,
          aiAnalyzedAt: new Date(),
          aiProvider: "Google Gemini",
        };
      } catch (error) {
        console.error(`‚ùå L·ªói ph√¢n t√≠ch ·ª©ng vi√™n ${candidate.name}:`, error);
        // Fallback v·ªõi ƒëi·ªÉm th·∫•p n·∫øu AI th·∫•t b·∫°i
        return {
          ...candidate,
          aiScore: 30,
          aiRecommendations: [
            "Kh√¥ng th·ªÉ ph√¢n t√≠ch ƒë∆∞·ª£c v·ªõi AI do quota limits",
          ],
          riskFactors: ["L·ªói ph√¢n t√≠ch AI: " + error.message],
          aiProvider: "Fallback",
          aiAnalyzedAt: new Date(),
        };
      }
    });

    // Ch·ªù t·∫•t c·∫£ requests ho√†n th√†nh
    const batchResults = await Promise.all(promises);

    console.log(
      `‚úÖ Ho√†n th√†nh ph√¢n t√≠ch batch: ${batchResults.length} ·ª©ng vi√™n`
    );
    return batchResults;
  }

  /**
   * Ph√¢n t√≠ch m·ªôt ·ª©ng vi√™n v·ªõi retry logic cho quota limits
   */
  async analyzeSingleCandidateWithRetry(
    candidate,
    jobRequirements,
    retryCount = 0
  ) {
    try {
      return await this.analyzeSingleCandidate(candidate, jobRequirements);
    } catch (error) {
      // Ki·ªÉm tra n·∫øu l√† l·ªói quota limit (429)
      if (error.message.includes("429") && error.message.includes("quota")) {
        console.warn(
          `‚ö†Ô∏è Quota limit reached for ${candidate.name}. Retry ${
            retryCount + 1
          }/${this.config.MAX_RETRIES}`
        );

        if (retryCount < this.config.MAX_RETRIES) {
          // Extract retry delay t·ª´ error message n·∫øu c√≥
          const retryMatch = error.message.match(
            /Please retry in (\d+(?:\.\d+)?)s/
          );
          const delayMs = retryMatch
            ? parseFloat(retryMatch[1]) * 1000
            : this.config.QUOTA_RETRY_DELAY;

          console.log(
            `‚è≥ ƒê·ª£i ${Math.ceil(delayMs / 1000)}s tr∆∞·ªõc khi retry...`
          );
          await new Promise((resolve) => setTimeout(resolve, delayMs));

          return this.analyzeSingleCandidateWithRetry(
            candidate,
            jobRequirements,
            retryCount + 1
          );
        }
      }

      // N·∫øu kh√¥ng ph·∫£i quota limit ho·∫∑c ƒë√£ h·∫øt retry, throw error
      throw error;
    }
  }

  /**
   * Ph√¢n t√≠ch m·ªôt ·ª©ng vi√™n v·ªõi Gemini AI
   */
  async analyzeSingleCandidate(candidate, jobRequirements) {
    const prompt = this.buildAnalysisPrompt(candidate, jobRequirements);

    try {
      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const analysisText = response.text();

      // Parse k·∫øt qu·∫£ t·ª´ AI
      return this.parseAIResponse(analysisText, candidate);
    } catch (error) {
      console.error("L·ªói g·ªçi Gemini API:", error);
      throw error;
    }
  }

  /**
   * T·∫°o prompt ƒë·ªÉ AI ph√¢n t√≠ch ·ª©ng vi√™n
   */
  buildAnalysisPrompt(candidate, jobRequirements) {
    const candidateData = {
      name: candidate.name || "Kh√¥ng r√µ",
      title: candidate.title || "Kh√¥ng r√µ",
      skills: candidate.skills || [],
      experience: candidate.experience || "Kh√¥ng r√µ",
      education: candidate.education || [],
      workHistory: candidate.workHistory || [],
      summary: candidate.summary || "Kh√¥ng c√≥",
    };

    const requirements = {
      requiredSkills: jobRequirements.requiredSkills || [],
      preferredSkills: jobRequirements.preferredSkills || [],
      jobTitle: jobRequirements.jobTitle || "Nh√¢n vi√™n IT",
      industry: jobRequirements.industry || "C√¥ng ngh·ªá th√¥ng tin",
      experienceLevel: jobRequirements.level || "all",
    };

    return `
B·∫°n l√† chuy√™n gia tuy·ªÉn d·ª•ng AI. H√£y ph√¢n t√≠ch ·ª©ng vi√™n sau v√† ƒë∆∞a ra ƒë√°nh gi√° chi ti·∫øt:

## TH√îNG TIN ·ª®NG VI√äN:
- T√™n: ${candidateData.name}
- V·ªã tr√≠ hi·ªán t·∫°i: ${candidateData.title}
- K·ªπ nƒÉng: ${candidateData.skills.join(", ")}
- Kinh nghi·ªám: ${candidateData.experience}
- M√¥ t·∫£ b·∫£n th√¢n: ${candidateData.summary}
- L·ªãch s·ª≠ c√¥ng vi·ªác: ${candidateData.workHistory
      .map((job) => `${job.title} t·∫°i ${job.company}`)
      .join(", ")}
- H·ªçc v·∫•n: ${candidateData.education
      .map((edu) => `${edu.degree} ${edu.field}`)
      .join(", ")}

## Y√äU C·∫¶U C√îNG VI·ªÜC:
- V·ªã tr√≠ tuy·ªÉn d·ª•ng: ${requirements.jobTitle}
- Ng√†nh: ${requirements.industry}
- K·ªπ nƒÉng b·∫Øt bu·ªôc: ${requirements.requiredSkills.join(", ")}
- K·ªπ nƒÉng ∆∞u ti√™n: ${requirements.preferredSkills.join(", ")}
- C·∫•p ƒë·ªô kinh nghi·ªám: ${requirements.experienceLevel}

## Y√äU C·∫¶U PH√ÇN T√çCH:
H√£y tr·∫£ l·ªùi theo ƒë·ªãnh d·∫°ng JSON ch√≠nh x√°c sau. QUAN TR·ªåNG: 
- KH√îNG bao g·ªìm markdown code blocks
- KH√îNG c√≥ k√Ω t·ª± l·∫° ho·∫∑c escape characters
- ƒê·∫¢M B·∫¢O m·ªçi key v√† value ƒë·ªÅu c√≥ d·∫•u ngo·∫∑c k√©p ƒë√∫ng

{
  "aiScore": 75,
  "fitPrediction": 80,
  "aiRecommendations": [
    "G·ª£i √Ω 1",
    "G·ª£i √Ω 2", 
    "G·ª£i √Ω 3"
  ],
  "strengthsAndWeaknesses": {
    "strengths": ["ƒêi·ªÉm m·∫°nh 1", "ƒêi·ªÉm m·∫°nh 2"],
    "weaknesses": ["ƒêi·ªÉm y·∫øu 1", "ƒêi·ªÉm y·∫øu 2"],
    "overallProfile": "excellent"
  },
  "skillsAnalysis": {
    "requiredSkillsMatch": 3,
    "totalSkills": 5,
    "skillLevel": "intermediate",
    "skillGaps": ["K·ªπ nƒÉng thi·∫øu 1", "K·ªπ nƒÉng thi·∫øu 2"]
  },
  "experienceAnalysis": {
    "totalYears": 3,
    "relevantExperience": 2,
    "leadershipExperience": false,
    "careerProgression": "stable"
  },
  "riskFactors": [
    "R·ªßi ro 1",
    "R·ªßi ro 2"
  ],
  "suggestedInterviewQuestions": [
    "C√¢u h·ªèi 1?",
    "C√¢u h·ªèi 2?",
    "C√¢u h·ªèi 3?"
  ],
  "aiTier": "Trung b√¨nh",
  "personalityInsights": {
    "communicationStyle": "average",
    "adaptability": "medium",
    "motivationFactors": ["Ph√°t tri·ªÉn k·ªπ nƒÉng"]
  }
}

Ch·ªâ tr·∫£ l·ªùi JSON object tr√™n, kh√¥ng th√™m text hay gi·∫£i th√≠ch g√¨ kh√°c.
    `;
  }

  /**
   * Parse ph·∫£n h·ªìi t·ª´ AI
   */
  parseAIResponse(aiResponse, candidate) {
    try {
      // Extract JSON t·ª´ markdown ho·∫∑c plain text
      let jsonStr = aiResponse.trim();

      // Remove markdown code blocks
      jsonStr = jsonStr.replace(/```json\s*/g, "").replace(/```\s*/g, "");

      // Clean up common issues
      jsonStr = jsonStr
        .replace(/[\u201C\u201D]/g, '"') // Smart quotes to regular quotes
        .replace(/[\u2018\u2019]/g, "'") // Smart single quotes
        .replace(/""([^"]*?)"/g, '"$1"'); // Fix double quotes at start

      // Try to find JSON object
      const jsonMatch = jsonStr.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y JSON trong response, d√πng fallback");
        return this.fallbackParseResponse(aiResponse, candidate);
      }

      let cleanJsonStr = jsonMatch[0];

      // Fix specific common errors
      cleanJsonStr = cleanJsonStr
        .replace(/""careerProgression"/g, '"careerProgression"') // Fix the specific error
        .replace(/"\s*careerProgression"/g, '"careerProgression"')
        .replace(/,\s*,/g, ",") // Remove double commas
        .replace(/,(\s*[}\]])/g, "$1"); // Remove trailing commas

      console.log("üîß Attempting to parse JSON for candidate:", candidate.name);

      const analysis = JSON.parse(cleanJsonStr);

      // Validate v√† set default values
      return {
        aiScore: Math.min(100, Math.max(0, analysis.aiScore || 50)),
        fitPrediction: Math.min(100, Math.max(0, analysis.fitPrediction || 50)),
        aiRecommendations: analysis.aiRecommendations || [
          "Ph√¢n t√≠ch ch∆∞a ho√†n t·∫•t",
        ],
        strengthsAndWeaknesses: analysis.strengthsAndWeaknesses || {
          strengths: ["ƒêang ph√¢n t√≠ch"],
          weaknesses: ["ƒêang ph√¢n t√≠ch"],
          overallProfile: "average",
        },
        skillsAnalysis: analysis.skillsAnalysis || {
          requiredSkillsMatch: 0,
          totalSkills: candidate.skills?.length || 0,
          skillLevel: "intermediate",
          skillGaps: [],
        },
        experienceAnalysis: analysis.experienceAnalysis || {
          totalYears: 0,
          relevantExperience: 0,
          leadershipExperience: false,
          careerProgression: "stable",
        },
        riskFactors: analysis.riskFactors || [],
        suggestedInterviewQuestions: analysis.suggestedInterviewQuestions || [
          "H√£y k·ªÉ v·ªÅ kinh nghi·ªám c·ªßa b·∫°n?",
          "M·ª•c ti√™u ngh·ªÅ nghi·ªáp c·ªßa b·∫°n l√† g√¨?",
        ],
        aiTier: analysis.aiTier || "Trung b√¨nh",
        personalityInsights: analysis.personalityInsights || {
          communicationStyle: "average",
          adaptability: "medium",
          motivationFactors: ["Ph√°t tri·ªÉn k·ªπ nƒÉng"],
        },
      };
    } catch (error) {
      console.error("L·ªói parse AI response:", error);
      console.log("Raw AI response:", aiResponse);

      // Fallback parsing ƒë∆°n gi·∫£n
      return this.fallbackParseResponse(aiResponse, candidate);
    }
  }

  /**
   * Fallback parsing n·∫øu JSON parsing th·∫•t b·∫°i
   */
  fallbackParseResponse(aiResponse, candidate) {
    // C·ªë g·∫Øng extract th√¥ng tin c∆° b·∫£n t·ª´ text
    const scoreMatch = aiResponse.match(/score[":]\s*(\d+)/i);
    const score = scoreMatch ? parseInt(scoreMatch[1]) : 60;

    return {
      aiScore: Math.min(100, Math.max(0, score)),
      fitPrediction: score,
      aiRecommendations: ["AI ƒë√£ ph√¢n t√≠ch nh∆∞ng c·∫ßn ki·ªÉm tra th√™m"],
      strengthsAndWeaknesses: {
        strengths: ["C√≥ kinh nghi·ªám trong lƒ©nh v·ª±c"],
        weaknesses: ["C·∫ßn ƒë√°nh gi√° th√™m qua ph·ªèng v·∫•n"],
        overallProfile: score >= 70 ? "good" : "average",
      },
      skillsAnalysis: {
        requiredSkillsMatch: candidate.skills?.length || 0,
        totalSkills: candidate.skills?.length || 0,
        skillLevel: "intermediate",
        skillGaps: [],
      },
      experienceAnalysis: {
        totalYears: this.extractYears(candidate.experience || ""),
        relevantExperience: 0,
        leadershipExperience: false,
        careerProgression: "stable",
      },
      riskFactors: [],
      suggestedInterviewQuestions: [
        "H√£y m√¥ t·∫£ kinh nghi·ªám c·ªßa b·∫°n?",
        "T·∫°i sao b·∫°n quan t√¢m ƒë·∫øn v·ªã tr√≠ n√†y?",
        "K·ªπ nƒÉng m·∫°nh nh·∫•t c·ªßa b·∫°n l√† g√¨?",
      ],
      aiTier:
        score >= 80 ? "T·ªët" : score >= 60 ? "Trung b√¨nh" : "C·∫ßn c·∫£i thi·ªán",
      personalityInsights: {
        communicationStyle: "average",
        adaptability: "medium",
        motivationFactors: ["Ph√°t tri·ªÉn ngh·ªÅ nghi·ªáp"],
      },
    };
  }

  /**
   * Fallback v·ªÅ AI c≈© n·∫øu API th·∫•t b·∫°i
   */
  async fallbackToLocalAI(candidates, jobRequirements) {
    console.log("‚ö†Ô∏è Fallback v·ªÅ AI local do l·ªói API");
    const { EnhancedAIService } = await import("./EnhancedAIService.js");
    return EnhancedAIService.analyzeAndRankCandidates(
      candidates,
      jobRequirements
    );
  }

  /**
   * Helper: Extract s·ªë nƒÉm t·ª´ text
   */
  extractYears(text) {
    const match = text.match(/(\d+)\s*(year|nƒÉm)/i);
    return match ? parseInt(match[1]) : 0;
  }

  /**
   * L·∫•y top ·ª©ng vi√™n n·ªïi b·∫≠t
   * @param {Array} analyzedCandidates - ·ª®ng vi√™n ƒë√£ ph√¢n t√≠ch
   * @param {number} limit - S·ªë l∆∞·ª£ng t·ªëi ƒëa
   * @returns {Array} Top ·ª©ng vi√™n
   */
  getTopCandidates(analyzedCandidates, limit = 10) {
    return analyzedCandidates
      .filter((candidate) => candidate.aiScore >= 60) // Ch·ªâ l·∫•y ·ª©ng vi√™n ƒëi·ªÉm >= 60
      .sort((a, b) => b.aiScore - a.aiScore)
      .slice(0, limit)
      .map((candidate, index) => ({
        ...candidate,
        aiRank: index + 1,
      }));
  }

  /**
   * L·∫•y th·ªëng k√™ ph√¢n t√≠ch
   */
  getAnalysisStats(analyzedCandidates) {
    const total = analyzedCandidates.length;
    const excellent = analyzedCandidates.filter((c) => c.aiScore >= 80).length;
    const good = analyzedCandidates.filter(
      (c) => c.aiScore >= 60 && c.aiScore < 80
    ).length;
    const average = analyzedCandidates.filter(
      (c) => c.aiScore >= 40 && c.aiScore < 60
    ).length;
    const poor = analyzedCandidates.filter((c) => c.aiScore < 40).length;

    return {
      total,
      excellent,
      good,
      average,
      poor,
      averageScore: Math.round(
        analyzedCandidates.reduce((sum, c) => sum + c.aiScore, 0) / total
      ),
    };
  }
}
