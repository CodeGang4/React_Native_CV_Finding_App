/**
 * Job Notification Helper
 * Auto-send notifications for job-related events
 */
import notificationApiService from '../services/api/NotificationApiService';

export class JobNotificationHelper {
    /**
     * T·ª± ƒë·ªông g·ª≠i th√¥ng b√°o khi c√≥ job m·ªõi ƒë∆∞·ª£c ƒëƒÉng
     * @param {object} jobData - Job data
     * @param {string} employerId - Employer ID
     */
    static async autoNotifyJobPosted(jobData, employerId) {
        try {
            console.log('Auto-sending job posted notification...', { jobId: jobData.id, employerId });
            
            // S·ª≠ d·ª•ng createNotification thay v√¨ sendSystemNotification ƒë·ªÉ ƒë∆°n gi·∫£n h∆°n
            const response = await notificationApiService.createNotification({
                user_id: employerId, // T·∫°m th·ªùi g·ª≠i cho ch√≠nh employer ƒë·ªÉ test
                type: 'job_posted',
                title: `Job Posted Successfully`,
                message: `Your job "${jobData.title}" has been posted successfully and is now visible to candidates.`,
                data: {
                    jobId: jobData.id,
                    jobTitle: jobData.title,
                    company: jobData.company,
                    location: jobData.location,
                    salaryMin: jobData.salaryMin,
                    salaryMax: jobData.salaryMax,
                    action: 'view_job',
                    auto_generated: true,
                    timestamp: new Date().toISOString()
                }
            });

            console.log('Auto job notification sent successfully:', response);
            return response;
        } catch (error) {
            console.error('Failed to auto-send job notification:', error);
            // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn job creation
            return null;
        }
    }

    /**
     * T·ª± ƒë·ªông g·ª≠i th√¥ng b√°o khi c√≥ ·ª©ng vi√™n apply
     * @param {object} applicationData - Application data
     */
    static async autoNotifyJobApplication(applicationData) {
        try {
            console.log('üîÑ Auto-sending application notification...');
            
            const response = await notificationApiService.createNotification({
                recipient_id: applicationData.employerId,
                recipient_type: 'employer',
                title: `üìù ·ª®ng vi√™n m·ªõi ·ª©ng tuy·ªÉn`,
                message: `${applicationData.candidateName || 'M·ªôt ·ª©ng vi√™n'} ƒë√£ ·ª©ng tuy·ªÉn v√†o v·ªã tr√≠ ${applicationData.jobTitle}`,
                type: 'application_status',
                sender_id: applicationData.candidateId,
                sender_type: 'candidate',
                data: {
                    applicationId: applicationData.id,
                    candidateId: applicationData.candidateId,
                    jobId: applicationData.jobId,
                    jobTitle: applicationData.jobTitle,
                    candidateName: applicationData.candidateName,
                    action: 'view_application',
                    autoGenerated: true,
                    timestamp: new Date().toISOString()
                }
            });

            console.log('‚úÖ Auto application notification sent:', response);
            return response;
        } catch (error) {
            console.error('‚ùå Failed to auto-send application notification:', error);
            return null;
        }
    }

    /**
     * T·ª± ƒë·ªông g·ª≠i th√¥ng b√°o ch√†o m·ª´ng user m·ªõi
     * @param {object} userData - User data
     */
    static async autoNotifyNewUserWelcome(userData) {
        try {
            console.log('üîÑ Auto-sending welcome notification...');
            
            const welcomeMessages = {
                'candidate': {
                    title: 'üéâ Ch√†o m·ª´ng ƒë·∫øn v·ªõi JobBridge!',
                    message: 'C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω! H√£y ho√†n thi·ªán h·ªì s∆° ƒë·ªÉ t√¨m ƒë∆∞·ª£c c√¥ng vi·ªác ph√π h·ª£p nh·∫•t.'
                },
                'employer': {
                    title: 'üè¢ Ch√†o m·ª´ng nh√† tuy·ªÉn d·ª•ng!',
                    message: 'C·∫£m ∆°n b·∫°n ƒë√£ gia nh·∫≠p JobBridge! B·∫Øt ƒë·∫ßu ƒëƒÉng tin tuy·ªÉn d·ª•ng ƒë·ªÉ t√¨m ·ª©ng vi√™n ph√π h·ª£p.'
                }
            };

            const message = welcomeMessages[userData.role] || welcomeMessages['candidate'];
            
            const response = await notificationApiService.createNotification({
                recipient_id: userData.id,
                recipient_type: userData.role,
                title: message.title,
                message: message.message,
                type: 'system_announcement',
                sender_type: 'system',
                data: {
                    welcomeType: 'new_user',
                    userRole: userData.role,
                    registrationDate: new Date().toISOString(),
                    autoGenerated: true,
                    action: userData.role === 'candidate' ? 'complete_profile' : 'create_job'
                }
            });

            console.log('‚úÖ Auto welcome notification sent:', response);
            return response;
        } catch (error) {
            console.error('‚ùå Failed to auto-send welcome notification:', error);
            return null;
        }
    }

    /**
     * T·ª± ƒë·ªông g·ª≠i th√¥ng b√°o x√°c th·ª±c email
     * @param {string} userId - User ID
     * @param {string} userRole - User role
     * @param {string} email - User email
     */
    static async autoNotifyEmailVerified(userId, userRole, email) {
        try {
            console.log('üîÑ Auto-sending email verification notification...');
            
            const response = await notificationApiService.createNotification({
                recipient_id: userId,
                recipient_type: userRole,
                title: '‚úÖ Email ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c',
                message: `Email ${email} c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c th·ª±c th√†nh c√¥ng. T√†i kho·∫£n c·ªßa b·∫°n hi·ªán ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t ƒë·∫ßy ƒë·ªß.`,
                type: 'account_verification',
                sender_type: 'system',
                data: {
                    verificationType: 'email',
                    email: email,
                    verificationDate: new Date().toISOString(),
                    autoGenerated: true,
                    action: 'explore_app'
                }
            });

            console.log('‚úÖ Auto email verification notification sent:', response);
            return response;
        } catch (error) {
            console.error('‚ùå Failed to auto-send email verification notification:', error);
            return null;
        }
    }

    /**
     * T·ª± ƒë·ªông g·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü h√†ng ng√†y
     */
    static async autoNotifyDailyReminder() {
        try {
            console.log('üîÑ Auto-sending daily reminder...');
            
            const candidateResponse = await notificationApiService.sendSystemNotification({
                recipient_type: 'candidate',
                title: 'üíº C∆° h·ªôi vi·ªác l√†m m·ªõi h√¥m nay',
                message: 'H√£y kh√°m ph√° nh·ªØng c∆° h·ªôi vi·ªác l√†m m·ªõi ƒë∆∞·ª£c ƒëƒÉng tuy·ªÉn h√¥m nay!',
                type: 'system_announcement',
                data: {
                    reminderType: 'daily_jobs',
                    autoGenerated: true,
                    action: 'browse_jobs',
                    timestamp: new Date().toISOString()
                }
            });

            const employerResponse = await notificationApiService.sendSystemNotification({
                recipient_type: 'employer',
                title: 'üìä Theo d√µi tin tuy·ªÉn d·ª•ng',
                message: 'Ki·ªÉm tra c√°c ·ª©ng vi√™n m·ªõi v√† qu·∫£n l√Ω tin tuy·ªÉn d·ª•ng c·ªßa b·∫°n.',
                type: 'system_announcement', 
                data: {
                    reminderType: 'daily_management',
                    autoGenerated: true,
                    action: 'manage_jobs',
                    timestamp: new Date().toISOString()
                }
            });

            console.log('‚úÖ Auto daily reminders sent');
            return { candidateResponse, employerResponse };
        } catch (error) {
            console.error('‚ùå Failed to auto-send daily reminders:', error);
            return null;
        }
    }

    /**
     * T·ª± ƒë·ªông g·ª≠i th√¥ng b√°o profile incomplete reminder
     * @param {string} userId - User ID  
     * @param {string} userRole - User role
     */
    static async autoNotifyProfileIncomplete(userId, userRole) {
        try {
            console.log('üîÑ Auto-sending profile incomplete reminder...');
            
            const response = await notificationApiService.createNotification({
                recipient_id: userId,
                recipient_type: userRole,
                title: 'üìù Ho√†n thi·ªán h·ªì s∆° c·ªßa b·∫°n',
                message: 'H·ªì s∆° c·ªßa b·∫°n ch∆∞a ƒë·∫ßy ƒë·ªß. H√£y ho√†n thi·ªán ƒë·ªÉ tƒÉng c∆° h·ªôi t√¨m ƒë∆∞·ª£c vi·ªác l√†m ph√π h·ª£p!',
                type: 'profile_update',
                sender_type: 'system',
                data: {
                    reminderType: 'profile_incomplete',
                    autoGenerated: true,
                    action: 'complete_profile',
                    timestamp: new Date().toISOString()
                }
            });

            console.log('‚úÖ Auto profile incomplete notification sent:', response);
            return response;
        } catch (error) {
            console.error('‚ùå Failed to auto-send profile incomplete notification:', error);
            return null;
        }
    }

    /**
     * Th√¥ng b√°o ·ª©ng vi√™n n·ªôp ƒë∆°n (g·ª≠i cho employer)
     * @param {string} employerId - ID nh√† tuy·ªÉn d·ª•ng
     * @param {string} candidateName - T√™n ·ª©ng vi√™n
     * @param {string} jobTitle - T√™n c√¥ng vi·ªác
     * @param {object} applicationData - D·ªØ li·ªáu ƒë∆°n ·ª©ng tuy·ªÉn
     */
    static async autoNotifyJobApplication(employerId, candidateName, jobTitle, applicationData = {}) {
        try {
            console.log('üîÑ Auto-sending job application notification...');
            
            const response = await notificationApiService.createNotification({
                recipient_id: employerId,
                recipient_type: 'employer',
                title: 'üíº C√≥ ƒë∆°n ·ª©ng tuy·ªÉn m·ªõi!',
                message: `${candidateName} v·ª´a ·ª©ng tuy·ªÉn v√†o v·ªã tr√≠ "${jobTitle}"`,
                type: 'application_received',
                sender_type: 'system',
                data: {
                    candidate_name: candidateName,
                    job_title: jobTitle,
                    application_id: applicationData.application_id,
                    candidate_id: applicationData.candidate_id,
                    action: 'view_application',
                    auto_generated: true,
                    timestamp: new Date().toISOString()
                }
            });

            console.log('‚úÖ Auto job application notification sent:', response);
            return response;
        } catch (error) {
            console.error('‚ùå Failed to auto-send job application notification:', error);
            return null;
        }
    }

    /**
     * Th√¥ng b√°o tr·∫°ng th√°i ƒë∆°n ·ª©ng tuy·ªÉn (g·ª≠i cho candidate) 
     * @param {string} candidateId - ID ·ª©ng vi√™n
     * @param {string} status - Tr·∫°ng th√°i m·ªõi (accepted/rejected/interview)
     * @param {string} jobTitle - T√™n c√¥ng vi·ªác
     * @param {object} extraData - D·ªØ li·ªáu b·ªï sung
     */
    static async autoNotifyApplicationStatus(candidateId, status, jobTitle, extraData = {}) {
        try {
            console.log('üîÑ Auto-sending application status notification...');
            
            const statusMessages = {
                'accepted': {
                    title: 'üéâ Ch√∫c m·ª´ng!',
                    message: `B·∫°n ƒë√£ ƒë∆∞·ª£c ch·∫•p nh·∫≠n cho v·ªã tr√≠ "${jobTitle}"`
                },
                'rejected': {
                    title: 'üòî Th√¥ng b√°o t·ª´ nh√† tuy·ªÉn d·ª•ng',
                    message: `ƒê∆°n ·ª©ng tuy·ªÉn "${jobTitle}" ch∆∞a ph√π h·ª£p l·∫ßn n√†y`
                },
                'interview': {
                    title: 'üìÖ M·ªùi ph·ªèng v·∫•n',
                    message: `B·∫°n ƒë∆∞·ª£c m·ªùi ph·ªèng v·∫•n cho v·ªã tr√≠ "${jobTitle}"`
                },
                'under_review': {
                    title: '‚è≥ ƒêang xem x√©t',
                    message: `ƒê∆°n ·ª©ng tuy·ªÉn "${jobTitle}" ƒëang ƒë∆∞·ª£c xem x√©t`
                }
            };

            const notification = statusMessages[status] || {
                title: 'üì¨ C·∫≠p nh·∫≠t ƒë∆°n ·ª©ng tuy·ªÉn',
                message: `C√≥ c·∫≠p nh·∫≠t m·ªõi cho ƒë∆°n ·ª©ng tuy·ªÉn "${jobTitle}"`
            };

            const response = await notificationApiService.createNotification({
                recipient_id: candidateId,
                recipient_type: 'candidate',
                title: notification.title,
                message: notification.message,
                type: 'application_status',
                sender_type: 'system',
                data: {
                    status: status,
                    job_title: jobTitle,
                    action: 'view_application_details',
                    auto_generated: true,
                    timestamp: new Date().toISOString(),
                    ...extraData
                }
            });

            console.log('‚úÖ Auto application status notification sent:', response);
            return response;
        } catch (error) {
            console.error('‚ùå Failed to auto-send application status notification:', error);
            return null;
        }
    }
}

export default JobNotificationHelper;