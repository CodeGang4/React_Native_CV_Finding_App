import React, { useState } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  TextInput,
  Modal,
  ActivityIndicator,
  Alert,
} from "react-native";
import CommonHeader from "../../../components/common/CommonHeader";
import { TAB_BAR_PADDING } from "../../../../shared/styles/layout";
import JobCard from "../../../components/home/cards/JobCard";
import { useHomeData } from "../../../../shared/services/HomeDataManager";
import { useAuth } from "../../../../shared/contexts/AuthContext";
import HomeApiService from "../../../../shared/services/api/HomeApiService";
import JobDetailScreen from "../../shared/JobDetailScreen";
import CandidateDetailNavigationScreen from "../../shared/CandidateDetailNavigationScreen";

const bestJobs = [
  {
    id: 1,
    title: "Java Developer",
    company: "C√¥ng ty TNHH Thu ph√≠ t·ª± ƒë·ªông VETC",
    salary: "T·ªõi 1,600 USD",
    location: "H√† N·ªôi",
    logo: "VETC",
    logoColor: "#00b14f",
    verified: true,
    backgroundColor: "#e8f5e8",
  },
  {
    id: 2,
    title:
      "Backend Developer (Node.Js) ‚Äì ‚Äì Thu Nh·∫≠p Gross Upto 32 Tri·ªáu (H√†...",
    company: "Open Reach Tech Hanoi",
    salary: "20 - 32 tri·ªáu",
    location: "H√† N·ªôi",
    logo: "ORT",
    logoColor: "#4a90e2",
    verified: false,
    backgroundColor: "#e8f5e8",
  },
  {
    id: 3,
    title: "Senior Front-End Developer (Angular)",
    company: "Ng√¢n h√†ng TMCP H√†ng H·∫£i Vi·ªát Nam (M...",
    salary: "1,000 - 2,000 USD",
    location: "H√† N·ªôi",
    logo: "MSB",
    logoColor: "#e74c3c",
    verified: true,
    backgroundColor: "#e8f5e8",
  },
  {
    id: 4,
    title: "Unity Developer Intern (8 - 12M Net)",
    company: "C√¥ng ty C·ªï ph·∫ßn Falcon Technology",
    salary: "8 - 12 tri·ªáu",
    location: "H√† N·ªôi",
    logo: "ü¶Ö",
    logoColor: "#f39c12",
    verified: true,
    backgroundColor: "#e8f5e8",
  },
  {
    id: 5,
    title: "Software Developer",
    company: "GOOD FOOD CO., LTD",
    salary: "20 - 25 tri·ªáu",
    location: "H·ªì Ch√≠ Minh",
    logo: "GF",
    logoColor: "#cc0000",
    verified: true,
    backgroundColor: "#fff",
  },
];

const filterOptions = {
  industries: [
    "T·∫•t c·∫£",
    "Kinh doanh / B√°n h√†ng",
    "Bi√™n / Phi√™n d·ªãch",
    "B√°o ch√≠ / Truy·ªÅn h√¨nh",
    "B∆∞u ch√≠nh - Vi·ªÖn th√¥ng",
    "B·∫£o hi·ªÉm",
    "B·∫•t ƒë·ªông s·∫£n",
    "Ch·ª©ng kho√°n / V√†ng / Ngo·∫°i t·ªá",
    "C√¥ng ngh·ªá cao",
    "C∆° kh√≠ / Ch·∫ø t·∫°o / T·ª± ƒë·ªông h√≥a",
    "Du l·ªãch",
    "D·∫ßu kh√≠/H√≥a ch·∫•t",
    "D·ªát may / Da gi√†y",
  ],
  jobTypes: [
    "T·∫•t c·∫£",
    "To√†n th·ªùi gian",
    "B√°n th·ªùi gian",
    "Th·ª±c t·∫≠p",
    "L√†m t·∫°i nh√†",
  ],
  salaryRanges: [
    "T·∫•t c·∫£",
    "D∆∞·ªõi 10 tri·ªáu",
    "10 - 15 tri·ªáu",
    "15 - 20 tri·ªáu",
    "20 - 25 tri·ªáu",
    "25 - 30 tri·ªáu",
    "30 - 50 tri·ªáu",
    "Tr√™n 50 tri·ªáu",
    "Th·ªèa thu·∫≠n",
  ],
  experienceLevels: [
    "T·∫•t c·∫£",
    "S·∫Øp ƒëi l√†m",
    "D∆∞·ªõi 1 nƒÉm",
    "1 - 3 nƒÉm",
    "3 - 5 nƒÉm",
    "5 - 10 nƒÉm",
    "Tr√™n 10 nƒÉm",
  ],
};

const FilterModal = ({
  visible,
  onClose,
  title,
  options,
  selectedOption,
  onSelectOption,
}) => (
  <Modal
    visible={visible}
    animationType="slide"
    transparent={true}
    onRequestClose={onClose}
  >
    <View style={styles.modalOverlay}>
      <View style={styles.modalContent}>
        <View style={styles.modalHeader}>
          <Text style={styles.modalTitle}>{title}</Text>
          <TouchableOpacity onPress={onClose}>
            <Text style={styles.closeButton}>√ó</Text>
          </TouchableOpacity>
        </View>
        {title !== "Ch·ªçn s·ªë nƒÉm kinh nghi·ªám" && (
          <View style={styles.searchContainer}>
            <Text style={styles.searchIcon}>üîç</Text>
            <TextInput
              style={styles.searchInput}
              placeholder="T√¨m ki·∫øm..."
              placeholderTextColor="#999"
            />
          </View>
        )}
        <ScrollView style={styles.optionsList}>
          {options.map((option, index) => (
            <TouchableOpacity
              key={index}
              style={styles.optionItem}
              onPress={() => {
                onSelectOption(option);
                onClose();
              }}
            >
              <Text
                style={[
                  styles.optionText,
                  selectedOption === option && styles.selectedOptionText,
                ]}
              >
                {option}
              </Text>
            </TouchableOpacity>
          ))}
        </ScrollView>
        {title === "Ch·ªçn s·ªë nƒÉm kinh nghi·ªám" && (
          <View style={styles.modalFooter}>
            <TouchableOpacity style={styles.clearButton} onPress={onClose}>
              <Text style={styles.clearButtonText}>X√≥a l·ªçc</Text>
            </TouchableOpacity>
            <TouchableOpacity style={styles.applyButton} onPress={onClose}>
              <Text style={styles.applyButtonText}>√Åp d·ª•ng</Text>
            </TouchableOpacity>
          </View>
        )}
      </View>
    </View>
  </Modal>
);

export default function BestJobsPage({ onBack }) {
  const { user } = useAuth();
  const { data, loading, error } = useHomeData();
  const { jobs } = data;

  // Debug logs
  console.log("[BestJobsPage] Component state:", {
    jobs: jobs?.length || 0,
    loading,
    error,
  });

  const [showRegionModal, setShowRegionModal] = useState(false);
  const [showExperienceModal, setShowExperienceModal] = useState(false);
  const [showSalaryModal, setShowSalaryModal] = useState(false);
  const [showIndustryModal, setShowIndustryModal] = useState(false);
  const [showJobDetail, setShowJobDetail] = useState(false);
  const [selectedJob, setSelectedJob] = useState(null);
  const [showCandidateDetail, setShowCandidateDetail] = useState(false);
  const [selectedCandidate, setSelectedCandidate] = useState(null);

  const [searchText, setSearchText] = useState("");
  const [selectedRegion, setSelectedRegion] = useState("Khu v·ª±c");
  const [selectedExperience, setSelectedExperience] = useState("Kinh nghi·ªám");
  const [selectedSalary, setSelectedSalary] = useState("M·ª©c");
  const [selectedIndustry, setSelectedIndustry] = useState("");

  const handleBackPress = () => {
    if (onBack && typeof onBack === "function") {
      onBack();
    }
  };

  const handleJobPress = (job) => {
    console.log("[BestJobsPage] Job pressed:", job.id);
    setSelectedJob(job);
    setShowJobDetail(true);
  };

  const handleJobDetailBack = () => {
    setShowJobDetail(false);
    setSelectedJob(null);
  };

  const handleCandidatePress = (candidate) => {
    console.log("[BestJobsPage] Candidate pressed:", candidate.id);
    setSelectedCandidate(candidate);
    setShowCandidateDetail(true);
  };

  const handleCandidateDetailBack = () => {
    setShowCandidateDetail(false);
    setSelectedCandidate(null);
  };

  const resetAllFilters = () => {
    setSearchText("");
    setSelectedRegion("Khu v·ª±c");
    setSelectedExperience("Kinh nghi·ªám");
    setSelectedSalary("M·ª©c");
    setSelectedIndustry("");
  };

  // Check if current user owns the job
  const isJobOwner = (job) => {
    return user && job && user.id === job.employer_id;
  };

  const handleJobEdit = async (updatedJob) => {
    try {
      if (!isJobOwner(selectedJob)) {
        Alert.alert("L·ªói", "B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a tin tuy·ªÉn d·ª•ng n√†y");
        return;
      }

      await HomeApiService.updateJob(updatedJob.id, updatedJob);
      setSelectedJob(updatedJob);
      Alert.alert("Th√†nh c√¥ng", "ƒê√£ c·∫≠p nh·∫≠t tin tuy·ªÉn d·ª•ng");
    } catch (error) {
      console.error("[BestJobsPage] Edit job error:", error);
      Alert.alert("L·ªói", error.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tin tuy·ªÉn d·ª•ng");
    }
  };

  const handleJobDelete = async (jobId) => {
    try {
      if (!isJobOwner(selectedJob)) {
        Alert.alert("L·ªói", "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a tin tuy·ªÉn d·ª•ng n√†y");
        return;
      }

      await HomeApiService.deleteJob(jobId);
      Alert.alert("Th√†nh c√¥ng", "ƒê√£ x√≥a tin tuy·ªÉn d·ª•ng", [
        {
          text: "OK",
          onPress: () => {
            setShowJobDetail(false);
            setSelectedJob(null);
          },
        },
      ]);
    } catch (error) {
      console.error("[BestJobsPage] Delete job error:", error);
      Alert.alert("L·ªói", error.message || "Kh√¥ng th·ªÉ x√≥a tin tuy·ªÉn d·ª•ng");
    }
  };

  // Show candidate detail screen if candidate is selected
  if (showCandidateDetail && selectedCandidate) {
    return (
      <CandidateDetailNavigationScreen
        candidate={selectedCandidate}
        onBack={handleCandidateDetailBack}
      />
    );
  }

  // Show job detail screen if job is selected
  if (showJobDetail && selectedJob) {
    const canEdit = isJobOwner(selectedJob);

    return (
      <JobDetailScreen
        job={selectedJob}
        onBack={handleJobDetailBack}
        onCandidatePress={handleCandidatePress}
        onEdit={canEdit ? handleJobEdit : null}
        onDelete={canEdit ? handleJobDelete : null}
        canViewCandidates={canEdit}
      />
    );
  }

  // S·ª≠ d·ª•ng data t·ª´ backend, fallback v·ªÅ data c≈© n·∫øu c√≥ l·ªói
  const baseJobs = error.jobs ? bestJobs : jobs || [];

  console.log("[BestJobsPage] Base jobs:", {
    baseJobsCount: baseJobs?.length || 0,
    hasError: !!error.jobs,
    jobsFromAPI: jobs?.length || 0,
  });

  // √Åp d·ª•ng c√°c filter
  const displayJobs = baseJobs.filter((job) => {
    // Filter theo search text (t√¨m ki·∫øm trong title, company, location)
    if (searchText.trim()) {
      const searchLower = searchText.toLowerCase();
      const titleMatch = job.title?.toLowerCase().includes(searchLower);
      const companyMatch =
        job.company?.toLowerCase().includes(searchLower) ||
        job.company_name?.toLowerCase().includes(searchLower);
      const locationMatch = job.location?.toLowerCase().includes(searchLower);

      if (!titleMatch && !companyMatch && !locationMatch) {
        return false;
      }
    }

    // Filter theo region
    if (
      selectedRegion !== "T·∫•t c·∫£" &&
      selectedRegion !== "Khu v·ª±c" &&
      job.location &&
      !job.location.includes(selectedRegion)
    ) {
      return false;
    }

    // Filter theo experience (n·∫øu c√≥ field t∆∞∆°ng ·ª©ng)
    if (
      selectedExperience !== "T·∫•t c·∫£" &&
      selectedExperience !== "Kinh nghi·ªám" &&
      job.experience &&
      !job.experience.includes(selectedExperience)
    ) {
      return false;
    }

    // Filter theo salary (n·∫øu c√≥ field t∆∞∆°ng ·ª©ng)
    if (
      selectedSalary !== "T·∫•t c·∫£" &&
      selectedSalary !== "M·ª©c" &&
      job.salary &&
      !job.salary.includes(selectedSalary)
    ) {
      return false;
    }

    // Filter theo industry (n·∫øu c√≥ field t∆∞∆°ng ·ª©ng)
    if (
      selectedIndustry !== "T·∫•t c·∫£" &&
      selectedIndustry &&
      job.industry &&
      !job.industry.includes(selectedIndustry)
    ) {
      return false;
    }

    return true;
  });

  return (
    <View style={styles.container}>
      <CommonHeader
        title="Vi·ªác l√†m t·ªët nh·∫•t"
        onBack={handleBackPress}
        showAI={false}
      />
      <View style={styles.searchBar}>
        <Text style={styles.searchIcon}>üîç</Text>
        <TextInput
          style={styles.searchInput}
          placeholder="ƒê·ªãa ƒëi·ªÉm - C√¥ng ty - V·ªã tr√≠ - Ng√†nh ngh·ªÅ"
          placeholderTextColor="#999"
          value={searchText}
          onChangeText={setSearchText}
        />
      </View>

      <View style={styles.filterContainer}>
        <TouchableOpacity style={styles.filterButton} onPress={resetAllFilters}>
          <Text style={styles.filterIcon}>‚öôÔ∏è</Text>
          <Text style={styles.filterText}>X√≥a b·ªô l·ªçc</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.filterButton}
          onPress={() => setShowRegionModal(true)}
        >
          <Text style={styles.filterText}>{selectedRegion}</Text>
          <Text style={styles.dropdownIcon}>‚ñæ</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.filterButton}
          onPress={() => setShowExperienceModal(true)}
        >
          <Text style={styles.filterText}>{selectedExperience}</Text>
          <Text style={styles.dropdownIcon}>‚ñæ</Text>
        </TouchableOpacity>
        <TouchableOpacity
          style={styles.filterButton}
          onPress={() => setShowSalaryModal(true)}
        >
          <Text style={styles.filterText}>{selectedSalary}</Text>
          <Text style={styles.dropdownIcon}>‚ñæ</Text>
        </TouchableOpacity>
      </View>

      <View style={styles.resultsContainer}>
        <Text style={styles.resultsText}>
          <Text style={styles.resultsNumber}>{displayJobs.length}</Text> k·∫øt qu·∫£
        </Text>
      </View>

      {loading.jobs ? (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#00b14f" />
          <Text style={styles.loadingText}>ƒêang t·∫£i d·ªØ li·ªáu vi·ªác l√†m...</Text>
        </View>
      ) : (
        <ScrollView
          style={styles.jobList}
          showsVerticalScrollIndicator={false}
          contentContainerStyle={TAB_BAR_PADDING}
        >
          {error.jobs && (
            <Text style={styles.errorText}>
              Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu t·ª´ server, hi·ªÉn th·ªã d·ªØ li·ªáu m·∫´u
            </Text>
          )}
          {displayJobs.map((job, index) => (
            <JobCard
              key={job.id || `fallback-${index}`}
              item={job}
              onPress={handleJobPress}
              showLogoColor={true}
            />
          ))}
        </ScrollView>
      )}

      <FilterModal
        visible={showRegionModal}
        onClose={() => setShowRegionModal(false)}
        title="B·ªô l·ªçc"
        options={["T·∫•t c·∫£", "H√† N·ªôi", "H·ªì Ch√≠ Minh", "ƒê√† N·∫µng", "H·∫£i Ph√≤ng"]}
        selectedOption={selectedRegion}
        onSelectOption={setSelectedRegion}
      />
      <FilterModal
        visible={showExperienceModal}
        onClose={() => setShowExperienceModal(false)}
        title="Ch·ªçn s·ªë nƒÉm kinh nghi·ªám"
        options={filterOptions.experienceLevels}
        selectedOption={selectedExperience}
        onSelectOption={setSelectedExperience}
      />
      <FilterModal
        visible={showSalaryModal}
        onClose={() => setShowSalaryModal(false)}
        title="Ch·ªçn m·ª©c l∆∞∆°ng"
        options={filterOptions.salaryRanges}
        selectedOption={selectedSalary}
        onSelectOption={setSelectedSalary}
      />
      <FilterModal
        visible={showIndustryModal}
        onClose={() => setShowIndustryModal(false)}
        title="Ch·ªçn ng√†nh ngh·ªÅ"
        options={filterOptions.industries}
        selectedOption={selectedIndustry}
        onSelectOption={setSelectedIndustry}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, backgroundColor: "#f5f5f5" },
  searchBar: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#f0f0f0",
    marginHorizontal: 16,
    marginVertical: 12,
    paddingHorizontal: 12,
    paddingVertical: 10,
    borderRadius: 8,
  },
  searchIcon: { fontSize: 16, marginRight: 8, color: "#666" },
  searchInput: { flex: 1, fontSize: 14, color: "#333" },
  filterContainer: {
    flexDirection: "row",
    paddingHorizontal: 16,
    marginBottom: 12,
    gap: 8,
  },
  filterButton: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#fff",
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: "#e0e0e0",
  },
  filterIcon: { fontSize: 12, marginRight: 4 },
  filterText: { fontSize: 14, color: "#333" },
  dropdownIcon: { fontSize: 10, color: "#666", marginLeft: 4 },
  resultsContainer: { paddingHorizontal: 16, marginBottom: 12 },
  resultsText: { fontSize: 14, color: "#666" },
  resultsNumber: { color: "#00b14f", fontWeight: "bold" },
  jobList: { flex: 1, paddingHorizontal: 16 },
  modalOverlay: {
    flex: 1,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    justifyContent: "center",
    alignItems: "center",
  },
  modalContent: {
    backgroundColor: "#fff",
    borderRadius: 12,
    width: "90%",
    maxHeight: "80%",
    padding: 0,
  },
  modalHeader: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: "#e0e0e0",
  },
  modalTitle: { fontSize: 18, fontWeight: "bold", color: "#333" },
  closeButton: { fontSize: 24, color: "#666" },
  searchContainer: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#f0f0f0",
    marginHorizontal: 16,
    marginVertical: 12,
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 8,
  },
  optionsList: { maxHeight: 300 },
  optionItem: {
    paddingHorizontal: 16,
    paddingVertical: 12,
    borderBottomWidth: 1,
    borderBottomColor: "#f0f0f0",
  },
  optionText: { fontSize: 16, color: "#333" },
  selectedOptionText: { color: "#00b14f", fontWeight: "bold" },
  modalFooter: { flexDirection: "row", padding: 16, gap: 12 },
  loadingContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    padding: 20,
  },
  loadingText: {
    marginTop: 10,
    fontSize: 14,
    color: "#666",
  },
  errorText: {
    backgroundColor: "#fff3cd",
    color: "#856404",
    padding: 12,
    marginHorizontal: 16,
    marginBottom: 10,
    borderRadius: 8,
    textAlign: "center",
  },
  clearButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: "#e0e0e0",
    alignItems: "center",
  },
  clearButtonText: { color: "#666", fontSize: 16 },
  applyButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 8,
    backgroundColor: "#00b14f",
    alignItems: "center",
  },
  applyButtonText: { color: "#fff", fontSize: 16, fontWeight: "bold" },
});
