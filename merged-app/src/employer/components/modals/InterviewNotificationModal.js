import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  Modal,
  TouchableOpacity,
  TextInput,
  ScrollView,
  Alert,
} from "react-native";
import { MaterialIcons } from "@expo/vector-icons";

const InterviewNotificationModal = ({ visible, onClose, applicantName }) => {
  const [selectedTemplate, setSelectedTemplate] = useState("formal");
  const [customMessage, setCustomMessage] = useState("");
  const [interviewDate, setInterviewDate] = useState("");
  const [interviewTime, setInterviewTime] = useState("");
  const [interviewLocation, setInterviewLocation] = useState("");

  const templates = {
    formal: {
      title: "Th∆∞ m·ªùi ph·ªèng v·∫•n ch√≠nh th·ª©c",
      content: `K√≠nh g·ª≠i ${applicantName},

C√¥ng ty ch√∫ng t√¥i ƒë√£ xem x√©t h·ªì s∆° c·ªßa b·∫°n v√† r·∫•t ·∫•n t∆∞·ª£ng v·ªõi kinh nghi·ªám c≈©ng nh∆∞ k·ªπ nƒÉng c·ªßa b·∫°n.

Ch√∫ng t√¥i xin tr√¢n tr·ªçng m·ªùi b·∫°n tham gia bu·ªïi ph·ªèng v·∫•n cho v·ªã tr√≠ ƒë√£ ·ª©ng tuy·ªÉn.

Th√¥ng tin chi ti·∫øt:
- Th·ªùi gian: [Ng√†y gi·ªù ph·ªèng v·∫•n]
- ƒê·ªãa ƒëi·ªÉm: [ƒê·ªãa ch·ªâ ph·ªèng v·∫•n]
- Ng∆∞·ªùi li√™n h·ªá: HR Department

Vui l√≤ng x√°c nh·∫≠n tham gia v√† chu·∫©n b·ªã c√°c gi·∫•y t·ªù c·∫ßn thi·∫øt.

Tr√¢n tr·ªçng,
TCC & Partners`,
    },
    friendly: {
      title: "L·ªùi m·ªùi ph·ªèng v·∫•n th√¢n thi·ªán",
      content: `Ch√†o ${applicantName}!

Ch√∫ng m√¨nh ƒë√£ xem CV c·ªßa b·∫°n v√† th·∫•y r·∫•t ph√π h·ª£p v·ªõi v·ªã tr√≠ team ƒëang tuy·ªÉn d·ª•ng.

B·∫°n c√≥ th·ªÉ s·∫Øp x·∫øp th·ªùi gian ƒë·ªÉ chat c√πng team v·ªÅ c√¥ng vi·ªác kh√¥ng?

Chi ti·∫øt bu·ªïi ph·ªèng v·∫•n:
- Th·ªùi gian: [Ng√†y gi·ªù ph·ªèng v·∫•n]  
- H√¨nh th·ª©c: [Online/Offline]
- Th·ªùi l∆∞·ª£ng: Kho·∫£ng 45-60 ph√∫t

N·∫øu c√≥ th·∫Øc m·∫Øc g√¨, b·∫°n c·ª© li√™n h·ªá tr·ª±c ti·∫øp nh√©!

Best regards,
TCC & Partners Team`,
    },
    online: {
      title: "M·ªùi ph·ªèng v·∫•n tr·ª±c tuy·∫øn",
      content: `Xin ch√†o ${applicantName},

C·∫£m ∆°n b·∫°n ƒë√£ quan t√¢m ƒë·∫øn v·ªã tr√≠ t·∫°i c√¥ng ty ch√∫ng t√¥i.

Ch√∫ng t√¥i mu·ªën m·ªùi b·∫°n tham gia bu·ªïi ph·ªèng v·∫•n tr·ª±c tuy·∫øn:

üìÖ Th·ªùi gian: [Ng√†y gi·ªù ph·ªèng v·∫•n]
üíª N·ªÅn t·∫£ng: Google Meet/Zoom
‚è∞ Th·ªùi l∆∞·ª£ng: 30-45 ph√∫t
üìã N·ªôi dung: Trao ƒë·ªïi v·ªÅ kinh nghi·ªám v√† k·ªπ nƒÉng

Link meeting s·∫Ω ƒë∆∞·ª£c g·ª≠i tr∆∞·ªõc bu·ªïi ph·ªèng v·∫•n 15 ph√∫t.

Mong nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ b·∫°n!

TCC & Partners`,
    },
  };

  const handleSend = () => {
    if (!interviewDate || !interviewTime) {
      Alert.alert("Th√¥ng b√°o", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th·ªùi gian ph·ªèng v·∫•n");
      return;
    }

    Alert.alert("Th√†nh c√¥ng!", "ƒê√£ g·ª≠i th√¥ng b√°o ph·ªèng v·∫•n ƒë·∫øn ·ª©ng vi√™n", [
      {
        text: "OK",
        onPress: () => {
          onClose();
          setInterviewDate("");
          setInterviewTime("");
          setInterviewLocation("");
          setCustomMessage("");
          setSelectedTemplate("formal");
        },
      },
    ]);
  };

  const renderTemplate = () => {
    const template = templates[selectedTemplate];
    let content = template.content;

    if (interviewDate && interviewTime) {
      content = content.replace(
        "[Ng√†y gi·ªù ph·ªèng v·∫•n]",
        `${interviewDate} l√∫c ${interviewTime}`
      );
    }

    if (interviewLocation) {
      content = content.replace("[ƒê·ªãa ch·ªâ ph·ªèng v·∫•n]", interviewLocation);
      content = content.replace("[Online/Offline]", "T·∫°i vƒÉn ph√≤ng");
    } else {
      content = content.replace("[Online/Offline]", "Ph·ªèng v·∫•n tr·ª±c tuy·∫øn");
    }

    return content;
  };

  if (!visible) return null;

  return (
    <Modal
      visible={visible}
      animationType="slide"
      presentationStyle="pageSheet"
    >
      <View style={styles.container}>
        <View style={styles.header}>
          <TouchableOpacity onPress={onClose}>
            <Text style={styles.cancelButton}>H·ªßy</Text>
          </TouchableOpacity>
          <Text style={styles.title}>G·ª≠i th√¥ng b√°o ph·ªèng v·∫•n</Text>
          <TouchableOpacity onPress={handleSend}>
            <Text style={styles.sendButton}>G·ª≠i</Text>
          </TouchableOpacity>
        </View>

        <ScrollView style={styles.content}>
          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Ng∆∞·ªùi nh·∫≠n</Text>
            <View style={styles.recipientContainer}>
              <MaterialIcons name="person" size={20} color="#666" />
              <Text style={styles.recipientName}>{applicantName}</Text>
            </View>
          </View>

          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Th√¥ng tin ph·ªèng v·∫•n</Text>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Ng√†y ph·ªèng v·∫•n *</Text>
              <TextInput
                style={styles.textInput}
                value={interviewDate}
                onChangeText={setInterviewDate}
                placeholder="VD: 20/12/2024"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>Gi·ªù ph·ªèng v·∫•n *</Text>
              <TextInput
                style={styles.textInput}
                value={interviewTime}
                onChangeText={setInterviewTime}
                placeholder="VD: 14:00"
              />
            </View>

            <View style={styles.inputGroup}>
              <Text style={styles.inputLabel}>ƒê·ªãa ƒëi·ªÉm (t√πy ch·ªçn)</Text>
              <TextInput
                style={styles.textInput}
                value={interviewLocation}
                onChangeText={setInterviewLocation}
                placeholder="ƒê·ªãa ch·ªâ vƒÉn ph√≤ng ho·∫∑c ƒë·ªÉ tr·ªëng n·∫øu online"
              />
            </View>
          </View>

          <View style={styles.section}>
            <Text style={styles.sectionTitle}>M·∫´u email</Text>
            <View style={styles.templateButtons}>
              <TouchableOpacity
                style={[
                  styles.templateButton,
                  selectedTemplate === "formal" && styles.activeTemplateButton,
                ]}
                onPress={() => setSelectedTemplate("formal")}
              >
                <Text
                  style={[
                    styles.templateButtonText,
                    selectedTemplate === "formal" &&
                      styles.activeTemplateButtonText,
                  ]}
                >
                  Ch√≠nh th·ª©c
                </Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[
                  styles.templateButton,
                  selectedTemplate === "friendly" &&
                    styles.activeTemplateButton,
                ]}
                onPress={() => setSelectedTemplate("friendly")}
              >
                <Text
                  style={[
                    styles.templateButtonText,
                    selectedTemplate === "friendly" &&
                      styles.activeTemplateButtonText,
                  ]}
                >
                  Th√¢n thi·ªán
                </Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[
                  styles.templateButton,
                  selectedTemplate === "online" && styles.activeTemplateButton,
                ]}
                onPress={() => setSelectedTemplate("online")}
              >
                <Text
                  style={[
                    styles.templateButtonText,
                    selectedTemplate === "online" &&
                      styles.activeTemplateButtonText,
                  ]}
                >
                  Tr·ª±c tuy·∫øn
                </Text>
              </TouchableOpacity>
            </View>
          </View>

          <View style={styles.section}>
            <Text style={styles.sectionTitle}>N·ªôi dung email</Text>
            <View style={styles.emailPreview}>
              <Text style={styles.emailSubject}>
                {templates[selectedTemplate].title}
              </Text>
              <Text style={styles.emailContent}>{renderTemplate()}</Text>
            </View>
          </View>

          <View style={styles.section}>
            <Text style={styles.sectionTitle}>Ghi ch√∫ th√™m (t√πy ch·ªçn)</Text>
            <TextInput
              style={[styles.textInput, styles.textArea]}
              value={customMessage}
              onChangeText={setCustomMessage}
              placeholder="Th√™m ghi ch√∫ ho·∫∑c y√™u c·∫ßu ƒë·∫∑c bi·ªát..."
              multiline
              numberOfLines={3}
            />
          </View>
        </ScrollView>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "white",
  },
  header: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    paddingHorizontal: 16,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: "#e0e0e0",
    paddingTop: 50,
  },
  title: {
    fontSize: 18,
    fontWeight: "bold",
    color: "#333",
  },
  cancelButton: {
    fontSize: 16,
    color: "#666",
  },
  sendButton: {
    fontSize: 16,
    color: "#00b14f",
    fontWeight: "bold",
  },
  content: {
    flex: 1,
    padding: 16,
  },
  section: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 12,
  },
  recipientContainer: {
    flexDirection: "row",
    alignItems: "center",
    backgroundColor: "#f8f8f8",
    padding: 12,
    borderRadius: 8,
  },
  recipientName: {
    fontSize: 16,
    color: "#333",
    marginLeft: 8,
    fontWeight: "500",
  },
  inputGroup: {
    marginBottom: 16,
  },
  inputLabel: {
    fontSize: 14,
    color: "#333",
    marginBottom: 6,
    fontWeight: "500",
  },
  textInput: {
    borderWidth: 1,
    borderColor: "#e0e0e0",
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 10,
    fontSize: 16,
    backgroundColor: "white",
  },
  textArea: {
    height: 80,
    textAlignVertical: "top",
  },
  templateButtons: {
    flexDirection: "row",
    marginBottom: 16,
  },
  templateButton: {
    flex: 1,
    paddingVertical: 10,
    paddingHorizontal: 12,
    borderWidth: 1,
    borderColor: "#e0e0e0",
    borderRadius: 6,
    alignItems: "center",
    marginRight: 8,
    backgroundColor: "white",
  },
  activeTemplateButton: {
    backgroundColor: "#00b14f",
    borderColor: "#00b14f",
  },
  templateButtonText: {
    fontSize: 14,
    color: "#666",
    fontWeight: "500",
  },
  activeTemplateButtonText: {
    color: "white",
  },
  emailPreview: {
    backgroundColor: "#f8f8f8",
    padding: 16,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: "#e0e0e0",
  },
  emailSubject: {
    fontSize: 16,
    fontWeight: "bold",
    color: "#333",
    marginBottom: 12,
    borderBottomWidth: 1,
    borderBottomColor: "#e0e0e0",
    paddingBottom: 8,
  },
  emailContent: {
    fontSize: 14,
    color: "#666",
    lineHeight: 20,
  },
});

export default InterviewNotificationModal;
